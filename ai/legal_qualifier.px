"""
ai/legal_qualifier.py
=====================
Determine whether a user’s message requires a *legal referral* and, if so,
identify the most relevant **practice area**.  This feeds the decision logic
for when to inject `legal_referral_prompt.txt` instead of a normal response.

Rationale
---------
Most support questions (refunds, shipping, warranty) are non-legal.  
This lightweight classifier prevents over-referring users while ensuring
potentially serious legal matters are escalated to a licensed attorney.
"""
from __future__ import annotations

import functools
from enum import Enum
from typing import Final, Tuple

import openai

from backend.utils.config import get_settings
from backend.utils.logging import logging

settings = get_settings()
log = logging.getLogger(__name__)

MODEL: Final = settings.OPENAI_CLASSIFICATION_MODEL or "gpt-3.5-turbo-0125"
TEMPERATURE: Final = 0  # deterministic classification

# ---------------------------------------------------------------------------
# Practice-area taxonomy
# ---------------------------------------------------------------------------

class PracticeArea(str, Enum):
    CONSUMER = "consumer protection"
    FAMILY = "family law"
    PERSONAL_INJURY = "personal injury"
    CRIMINAL = "criminal"
    EMPLOYMENT = "employment"
    IMMIGRATION = "immigration"
    CIVIL = "civil litigation"
    UNKNOWN = "unknown"


# ---------------------------------------------------------------------------
# Prompt template with few-shot examples
# ---------------------------------------------------------------------------

_SYSTEM_PROMPT = (
    "You are a classifier that labels user messages for legal referral needs.\n"
    "Respond ONLY with JSON like: {\"needs_referral\": true/false, \"practice_area\": \"...\"}.\n"
    "If unsure about the specific area, use \"unknown\".\n"
)

_FEW_SHOT: Final = [
    # noqa: E241 (align columns)
    ("I think my landlord is evicting me illegally.",            True, PracticeArea.CIVIL),
    ("Can you explain what a prenup does?",                      True, PracticeArea.FAMILY),
    ("My kid swallowed a toy that was recalled—what now?",       True, PracticeArea.PERSONAL_INJURY),
    ("Where do I mail the product to get a replacement?",        False, PracticeArea.UNKNOWN),
    ("Why is my refund taking so long?",                         False, PracticeArea.UNKNOWN),
    ("ICE detained my spouse at the border. Help!",              True, PracticeArea.IMMIGRATION),
    ("My boss isn’t paying overtime—what are my rights?",        True, PracticeArea.EMPLOYMENT),
]


def _build_messages(user_text: str) -> list[dict]:
    msgs: list[dict] = [{"role": "system", "content": _SYSTEM_PROMPT}]
    for text, need, area in _FEW_SHOT:
        msgs.append(
            {
                "role": "user",
                "content": text,
            }
        )
        msgs.append(
            {
                "role": "assistant",
                "content": f'{{"needs_referral": {str(need).lower()}, "practice_area": "{area}"}}',
            }
        )
    msgs.append({"role": "user", "content": user_text})
    return msgs


# ---------------------------------------------------------------------------
# Classifier
# ---------------------------------------------------------------------------

@functools.lru_cache(maxsize=1024)
def classify_message(text: str) -> Tuple[bool, PracticeArea]:
    """
    Return `(needs_referral, practice_area)`.

    * `needs_referral` – True if user should be directed to a lawyer.
    * `practice_area`  – Best-match PracticeArea enum (or UNKNOWN).
    """
    if len(text) > 4_000:
        text = text[:4_000]  # truncation safeguard

    try:
        response = openai.ChatCompletion.create(
            model=MODEL,
            temperature=TEMPERATURE,
            messages=_build_messages(text),
        )
        raw = response["choices"][0]["message"]["content"].strip()
    except Exception as exc:  # network, rate limit, etc.
        log.warning("OpenAI classification failed: %s", exc)
        return False, PracticeArea.UNKNOWN

    # Basic JSON parse (no external deps)
    import json

    try:
        data = json.loads(raw)
        needs = bool(data.get("needs_referral"))
        area_str = (data.get("practice_area") or "").lower()
        area = PracticeArea(area_str) if area_str in PracticeArea._value2member_map_ else PracticeArea.UNKNOWN
        return needs, area
    except (json.JSONDecodeError, ValueError, KeyError) as exc:
        log.warning("Classifier returned unparseable JSON: %s – %s", raw, exc)
        return False, PracticeArea.UNKNOWN


# ---------------------------------------------------------------------------
# Convenience helper
# ---------------------------------------------------------------------------

async def needs_legal_referral(user_text: str) -> Tuple[bool, PracticeArea]:
    """
    Async wrapper so callers in async routes can await the result.
    """
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, classify_message, user_text)
